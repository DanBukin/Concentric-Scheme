# -*- coding: utf-8 -*-
"""concentric_scheme.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f64rod3EfwvJHkQ6UyvndWZ1_rxtNBGP
"""

import matplotlib.pyplot as plt
from matplotlib.ticker import AutoMinorLocator
from matplotlib.ticker import FuncFormatter
import numpy as np

formatter = FuncFormatter(lambda x, _: f"{x:.0f}")

def print_scheme_itog(D,d):
  centers = []
  centers_1=[]
  centers_2=[]


  fig, ax = plt.subplots(figsize=(10, 10))
  circle_0 = plt.Circle((0,0), D/2, edgecolor='#D44B46', facecolor='#1A1A1A')
  ax.add_patch(circle_0)

  centers = []

  max_index = int((D/2) // d) + 1

  for k in range(0, max_index + 1):
      theta = np.linspace(0, 2 * np.pi, 6 * k, endpoint=False)
      for angle in theta:
          x = (k * d) * np.cos(angle)
          y = (k * d) * np.sin(angle)
          if np.sqrt(x ** 2 + y ** 2) + d/2 <= (D/2):
              centers.append((x, y,k))
  small_circle = plt.Circle((0, 0), d/2,edgecolor='#D44B46', facecolor='#D44B46')
  ax.add_artist(small_circle)
  for (x, y,k) in centers:
      if k % 2 == 0:
          small_circle = plt.Circle((x, y), d/2,edgecolor='#D44B46', facecolor='#D44B46')
      else:
          small_circle = plt.Circle((x, y), d/2, edgecolor='white', facecolor='#1A1A1A')
      ax.add_artist(small_circle)

  ax.set_xlim(-D / 2 - d, D / 2 + d)
  ax.set_ylim(-D / 2 - d, D / 2 + d)
  ax.tick_params(axis='x', colors='white', labelsize=14)
  ax.tick_params(axis='y', colors='white', labelsize=14)
  ax.grid(True, color='#D44B46', linestyle='--', linewidth=0.1)
  ax.grid(which='major', color='gray', linestyle='--', linewidth=0.1)
  ax.grid(which='minor', color='gray', linestyle='--', linewidth=0.1)
  ax.xaxis.set_minor_locator(AutoMinorLocator())
  ax.yaxis.set_minor_locator(AutoMinorLocator())
  ax.title.set_color('white')
  fig.patch.set_facecolor('#1A1A1A')
  ax.set_facecolor('#1A1A1A')
  fig.subplots_adjust(left=0.07, bottom=0.05, right=0.98, top=0.98)
  ax.xaxis.set_major_formatter(formatter)
  ax.yaxis.set_major_formatter(formatter)
  ax.tick_params(axis='x', colors='white', labelsize=15)
  ax.tick_params(axis='y', colors='white', labelsize=15)
  plt.show()

print_scheme_itog(300,10)

